type FetchInterface = (input: string | any, init?: RequestInit | any) => Promise<unknown>;
type UrlInterface = typeof URL;
type WebSocketConstructor = {
    new (url: URL, protocols?: string | string[]): WebSocketInterface;
};
type WebSocketInterface = {
    readonly readyState: number;
    addEventListener(type: string, listener: (this: WebSocketInterface, ev: any) => any): void;
    removeEventListener(type: string, listener: (this: WebSocketInterface, ev: any) => any): void;
    send(data: string): void;
    close(code?: number, reason?: string): void;
};

/**
 * empty directus client
 */
interface DirectusClient<Schema extends object> {
    url: URL;
    globals: ClientGlobals;
    with: <Extension extends object>(createExtension: (client: DirectusClient<Schema>) => Extension) => this & Extension;
}
/**
 * All used globals for the client
 */
type ClientGlobals = {
    fetch: FetchInterface;
    WebSocket: WebSocketConstructor;
    URL: UrlInterface;
};
/**
 * Available options on the client
 */
type ClientOptions = {
    globals?: Partial<ClientGlobals>;
};

export { ClientOptions as C, DirectusClient as D, FetchInterface as F, UrlInterface as U, WebSocketConstructor as W, ClientGlobals as a, WebSocketInterface as b };
