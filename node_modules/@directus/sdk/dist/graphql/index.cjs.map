{"version":3,"sources":["../../src/graphql/index.ts","../../src/utils/is-response.ts","../../src/utils/extract-data.ts","../../src/utils/request.ts","../../src/client.ts","../../src/rest/utils/query-to-params.ts","../../src/utils/get-request-url.ts","../../src/graphql/composable.ts"],"sourcesContent":["export * from './composable.js';\nexport type * from './types.js';\n","/**\n * Custom type guard to check if an object is likely a Fetch Response\n */\nexport function isFetchResponse(result: unknown): result is Response {\n\tif (typeof result !== 'object' || !result) return false;\n\n\treturn (\n\t\t'headers' in result &&\n\t\t'ok' in result &&\n\t\t'json' in result &&\n\t\ttypeof result.json === 'function' &&\n\t\t'text' in result &&\n\t\ttypeof result.json === 'function'\n\t);\n}\n","import { isFetchResponse } from './is-response.js';\n\n/**\n * Tries to extract a fetch response\n */\nexport async function extractData(response: unknown) {\n\tif (typeof response !== 'object' || !response) return;\n\n\tif (isFetchResponse(response)) {\n\t\tconst type = response.headers.get('Content-Type')?.toLowerCase();\n\n\t\tif (type?.startsWith('application/json') || type?.startsWith('application/health+json')) {\n\t\t\tconst result = await response.json();\n\t\t\tif (!response.ok) throw result;\n\t\t\tif ('data' in result) return result.data;\n\t\t\treturn result;\n\t\t}\n\n\t\tif (type?.startsWith('text/html') || type?.startsWith('text/plain')) {\n\t\t\tconst result = await response.text();\n\t\t\tif (!response.ok) throw result;\n\t\t\treturn result;\n\t\t}\n\n\t\t// fallback for anything else\n\t\treturn response;\n\t}\n\n\t// exception for alternatives like ofetch that don't return the Response object\n\treturn 'data' in response ? response.data : response;\n}\n","import type { FetchInterface } from '../index.js';\nimport { extractData } from './extract-data.js';\n\n/**\n * Request helper providing default settings\n *\n * @param url The request URL\n * @param options The request options\n *\n * @returns The API result if successful\n */\nexport const request = async <Output = any>(\n\turl: string,\n\toptions: RequestInit,\n\tfetcher: FetchInterface = globalThis.fetch\n): Promise<Output> => {\n\toptions.headers =\n\t\ttypeof options.headers === 'object' && !Array.isArray(options.headers)\n\t\t\t? (options.headers as Record<string, string>)\n\t\t\t: {};\n\n\tconst response = await fetcher(url, options);\n\n\treturn extractData(response).catch((reason) => {\n\t\tconst errors = typeof reason === 'object' && 'errors' in reason ? reason.errors : reason;\n\t\tthrow { errors, response };\n\t});\n};\n","import type { ClientGlobals, ClientOptions, DirectusClient } from './types/client.js';\n\n/**\n * The default globals supplied to the client\n */\nconst defaultGlobals: ClientGlobals = {\n\tfetch: globalThis.fetch,\n\tWebSocket: globalThis.WebSocket,\n\tURL: globalThis.URL,\n};\n\n/**\n * Creates a client to communicate with a Directus app.\n *\n * @param url The URL to the Directus app.\n * @param config The optional configuration.\n *\n * @returns A Directus client.\n */\nexport const createDirectus = <Schema extends object = any>(\n\turl: string,\n\toptions: ClientOptions = {}\n): DirectusClient<Schema> => {\n\tconst globals = options.globals ? { ...defaultGlobals, ...options.globals } : defaultGlobals;\n\treturn {\n\t\tglobals,\n\t\turl: new globals.URL(url),\n\t\twith(createExtension) {\n\t\t\treturn {\n\t\t\t\t...this,\n\t\t\t\t...createExtension(this),\n\t\t\t};\n\t\t},\n\t};\n};\n","import type { AggregationTypes, GroupByFields, Query } from '../../types/index.js';\n\ntype ExtendedQuery<Schema extends object, Item> = Query<Schema, Item> & {\n\taggregate?: Record<keyof AggregationTypes, string>;\n\tgroupBy?: (string | GroupByFields<Schema, Item>)[];\n};\n\n/**\n * Transform nested query object to an url compatible format\n *\n * @param query The nested query object\n *\n * @returns Flat query parameters\n */\nexport const queryToParams = <Schema extends object, Item>(\n\tquery: ExtendedQuery<Schema, Item>\n): Record<string, string> => {\n\tconst params: Record<string, string> = {};\n\n\tif (Array.isArray(query.fields) && query.fields.length > 0) {\n\t\ttype FieldItem = (typeof query.fields)[number];\n\n\t\tconst walkFields = (value: FieldItem, chain: string[] = []): string | string[] => {\n\t\t\tif (typeof value === 'object') {\n\t\t\t\tconst result = [];\n\n\t\t\t\tfor (const key in value) {\n\t\t\t\t\tconst nestedField = value[key as keyof typeof value] ?? [];\n\n\t\t\t\t\tif (Array.isArray(nestedField)) {\n\t\t\t\t\t\t// regular nested fields\n\t\t\t\t\t\tfor (const item of nestedField) {\n\t\t\t\t\t\t\tresult.push(walkFields(item as FieldItem, [...chain, key]));\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (typeof nestedField === 'object') {\n\t\t\t\t\t\t// many to any nested\n\t\t\t\t\t\tfor (const scope of Object.keys(nestedField)) {\n\t\t\t\t\t\t\tconst fields = (nestedField as Record<string, FieldItem[]>)[scope]!;\n\n\t\t\t\t\t\t\tfor (const item of fields) {\n\t\t\t\t\t\t\t\tresult.push(walkFields(item as FieldItem, [...chain, `${key}:${scope}`]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn result.flatMap((items) => items);\n\t\t\t}\n\n\t\t\treturn [...chain, String(value)].join('.');\n\t\t};\n\n\t\tparams['fields'] = query.fields.flatMap((value) => walkFields(value)).join(',');\n\t}\n\n\tif (query.filter && Object.keys(query.filter).length > 0) {\n\t\tparams['filter'] = JSON.stringify(query.filter);\n\t}\n\n\tif (query.search) {\n\t\t// covers both empty string and undefined\n\t\tparams['search'] = query.search;\n\t}\n\n\tif ('sort' in query && query.sort) {\n\t\t// covers empty array and undefined\n\t\tparams['sort'] = typeof query.sort === 'string' ? query.sort : query.sort.join(',');\n\t}\n\n\tif (typeof query.limit === 'number' && query.limit >= -1) {\n\t\tparams['limit'] = String(query.limit);\n\t}\n\n\tif (typeof query.offset === 'number' && query.offset >= 0) {\n\t\tparams['offset'] = String(query.offset);\n\t}\n\n\tif (typeof query.page === 'number' && query.page >= 1) {\n\t\tparams['page'] = String(query.page);\n\t}\n\n\tif (query.deep && Object.keys(query.deep).length > 0) {\n\t\tparams['deep'] = JSON.stringify(query.deep);\n\t}\n\n\tif (query.alias && Object.keys(query.alias).length > 0) {\n\t\tparams['alias'] = JSON.stringify(query.alias);\n\t}\n\n\tif (query.aggregate && Object.keys(query.aggregate).length > 0) {\n\t\tparams['aggregate'] = JSON.stringify(query.aggregate);\n\t}\n\n\tif (query.groupBy && query.groupBy.length > 0) {\n\t\tparams['groupBy'] = query.groupBy.join(',');\n\t}\n\n\tfor (const [key, value] of Object.entries(query)) {\n\t\tif (key in params) continue;\n\n\t\tif (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n\t\t\tparams[key] = String(value);\n\t\t} else {\n\t\t\tparams[key] = JSON.stringify(value);\n\t\t}\n\t}\n\n\treturn params;\n};\n","import { queryToParams } from '../index.js';\n\nconst SEPARATOR = '/';\n\nconst mergePaths = (a: string, b: string) => {\n\tif (a.endsWith(SEPARATOR)) a = a.slice(0, -1);\n\tif (!b.startsWith(SEPARATOR)) b = SEPARATOR + b;\n\treturn a + b;\n};\n\n/**\n * Build URL based on provided options\n *\n * @param baseUrl The base URL\n * @param options The request options\n *\n * @returns URL\n */\nexport const getRequestUrl = (baseUrl: URL, path: string, params?: Record<string, any>): URL => {\n\tconst newPath = baseUrl.pathname === SEPARATOR ? path : mergePaths(baseUrl.pathname, path);\n\tconst url = new globalThis.URL(newPath, baseUrl);\n\n\tif (params) {\n\t\tfor (const [k, v] of Object.entries(queryToParams(params))) {\n\t\t\tif (v && typeof v === 'object' && !Array.isArray(v)) {\n\t\t\t\tfor (const [k2, v2] of Object.entries(v)) {\n\t\t\t\t\turl.searchParams.set(`${k}[${k2}]`, String(v2));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\turl.searchParams.set(k, v);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn url;\n};\n","import type { DirectusClient } from '../types/client.js';\nimport type { GraphqlClient, GraphqlConfig } from './types.js';\nimport { request } from '../utils/request.js';\nimport { getRequestUrl } from '../utils/get-request-url.js';\nimport type { AuthenticationClient } from '../auth/types.js';\n\nconst defaultConfigValues: GraphqlConfig = {};\n\n/**\n * Creates a client to communicate with Directus GraphQL.\n *\n * @returns A Directus GraphQL client.\n */\nexport const graphql = (config: Partial<GraphqlConfig> = {}) => {\n\treturn <Schema extends object>(client: DirectusClient<Schema>): GraphqlClient<Schema> => {\n\t\tconst gqlConfig = { ...defaultConfigValues, ...config };\n\t\treturn {\n\t\t\tasync query<Output extends object = Record<string, any>>(\n\t\t\t\tquery: string,\n\t\t\t\tvariables?: Record<string, unknown>,\n\t\t\t\tscope: 'items' | 'system' = 'items'\n\t\t\t): Promise<Output> {\n\t\t\t\tconst fetchOptions: RequestInit = {\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\tbody: JSON.stringify({ query, variables }),\n\t\t\t\t};\n\n\t\t\t\tif ('credentials' in gqlConfig) {\n\t\t\t\t\tfetchOptions.credentials = gqlConfig.credentials;\n\t\t\t\t}\n\n\t\t\t\tconst headers: Record<string, string> = {};\n\n\t\t\t\tif ('getToken' in this) {\n\t\t\t\t\tconst token = await (this.getToken as AuthenticationClient<Schema>['getToken'])();\n\n\t\t\t\t\tif (token) {\n\t\t\t\t\t\theaders['Authorization'] = `Bearer ${token}`;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ('Content-Type' in headers === false) {\n\t\t\t\t\theaders['Content-Type'] = 'application/json';\n\t\t\t\t}\n\n\t\t\t\tfetchOptions.headers = headers;\n\t\t\t\tconst requestPath = scope === 'items' ? '/graphql' : '/graphql/system';\n\t\t\t\tconst requestUrl = getRequestUrl(client.url, requestPath);\n\n\t\t\t\treturn await request<Output>(requestUrl.toString(), fetchOptions, client.globals.fetch);\n\t\t\t},\n\t\t};\n\t};\n};\n"],"mappings":"yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GCGO,SAASI,EAAgBC,EAAqC,CACpE,OAAI,OAAOA,GAAW,UAAY,CAACA,EAAe,GAGjD,YAAaA,GACb,OAAQA,GACR,SAAUA,GACV,OAAOA,EAAO,MAAS,YACvB,SAAUA,GACV,OAAOA,EAAO,MAAS,UAEzB,CCTA,eAAsBC,EAAYC,EAAmB,CACpD,GAAI,SAAOA,GAAa,UAAY,CAACA,GAErC,IAAIC,EAAgBD,CAAQ,EAAG,CAC9B,IAAME,EAAOF,EAAS,QAAQ,IAAI,cAAc,GAAG,YAAY,EAE/D,GAAIE,GAAM,WAAW,kBAAkB,GAAKA,GAAM,WAAW,yBAAyB,EAAG,CACxF,IAAMC,EAAS,MAAMH,EAAS,KAAK,EACnC,GAAI,CAACA,EAAS,GAAI,MAAMG,EACxB,MAAI,SAAUA,EAAeA,EAAO,KAC7BA,CACR,CAEA,GAAID,GAAM,WAAW,WAAW,GAAKA,GAAM,WAAW,YAAY,EAAG,CACpE,IAAMC,EAAS,MAAMH,EAAS,KAAK,EACnC,GAAI,CAACA,EAAS,GAAI,MAAMG,EACxB,OAAOA,CACR,CAGA,OAAOH,CACR,CAGA,MAAO,SAAUA,EAAWA,EAAS,KAAOA,EAC7C,CCnBO,IAAMI,EAAU,MACtBC,EACAC,EACAC,EAA0B,WAAW,QAChB,CACrBD,EAAQ,QACP,OAAOA,EAAQ,SAAY,UAAY,CAAC,MAAM,QAAQA,EAAQ,OAAO,EACjEA,EAAQ,QACT,CAAC,EAEL,IAAME,EAAW,MAAMD,EAAQF,EAAKC,CAAO,EAE3C,OAAOG,EAAYD,CAAQ,EAAE,MAAOE,GAAW,CAE9C,KAAM,CAAE,OADO,OAAOA,GAAW,UAAY,WAAYA,EAASA,EAAO,OAASA,EAClE,SAAAF,CAAS,CAC1B,CAAC,CACF,ECtBA,IAAMG,EAAgC,CACrC,MAAO,WAAW,MAClB,UAAW,WAAW,UACtB,IAAK,WAAW,GACjB,ECKO,IAAMC,EACZC,GAC4B,CAC5B,IAAMC,EAAiC,CAAC,EAExC,GAAI,MAAM,QAAQD,EAAM,MAAM,GAAKA,EAAM,OAAO,OAAS,EAAG,CAG3D,IAAME,EAAa,CAACC,EAAkBC,EAAkB,CAAC,IAAyB,CACjF,GAAI,OAAOD,GAAU,SAAU,CAC9B,IAAME,EAAS,CAAC,EAEhB,QAAWC,KAAOH,EAAO,CACxB,IAAMI,EAAcJ,EAAMG,CAAyB,GAAK,CAAC,EAEzD,GAAI,MAAM,QAAQC,CAAW,EAE5B,QAAWC,KAAQD,EAClBF,EAAO,KAAKH,EAAWM,EAAmB,CAAC,GAAGJ,EAAOE,CAAG,CAAC,CAAC,UAEjD,OAAOC,GAAgB,SAEjC,QAAWE,KAAS,OAAO,KAAKF,CAAW,EAAG,CAC7C,IAAMG,EAAUH,EAA4CE,CAAK,EAEjE,QAAWD,KAAQE,EAClBL,EAAO,KAAKH,EAAWM,EAAmB,CAAC,GAAGJ,EAAO,GAAGE,CAAG,IAAIG,CAAK,EAAE,CAAC,CAAC,CAE1E,CAEF,CAEA,OAAOJ,EAAO,QAASM,GAAUA,CAAK,CACvC,CAEA,MAAO,CAAC,GAAGP,EAAO,OAAOD,CAAK,CAAC,EAAE,KAAK,GAAG,CAC1C,EAEAF,EAAO,OAAYD,EAAM,OAAO,QAASG,GAAUD,EAAWC,CAAK,CAAC,EAAE,KAAK,GAAG,CAC/E,CAEIH,EAAM,QAAU,OAAO,KAAKA,EAAM,MAAM,EAAE,OAAS,IACtDC,EAAO,OAAY,KAAK,UAAUD,EAAM,MAAM,GAG3CA,EAAM,SAETC,EAAO,OAAYD,EAAM,QAGtB,SAAUA,GAASA,EAAM,OAE5BC,EAAO,KAAU,OAAOD,EAAM,MAAS,SAAWA,EAAM,KAAOA,EAAM,KAAK,KAAK,GAAG,GAG/E,OAAOA,EAAM,OAAU,UAAYA,EAAM,OAAS,KACrDC,EAAO,MAAW,OAAOD,EAAM,KAAK,GAGjC,OAAOA,EAAM,QAAW,UAAYA,EAAM,QAAU,IACvDC,EAAO,OAAY,OAAOD,EAAM,MAAM,GAGnC,OAAOA,EAAM,MAAS,UAAYA,EAAM,MAAQ,IACnDC,EAAO,KAAU,OAAOD,EAAM,IAAI,GAG/BA,EAAM,MAAQ,OAAO,KAAKA,EAAM,IAAI,EAAE,OAAS,IAClDC,EAAO,KAAU,KAAK,UAAUD,EAAM,IAAI,GAGvCA,EAAM,OAAS,OAAO,KAAKA,EAAM,KAAK,EAAE,OAAS,IACpDC,EAAO,MAAW,KAAK,UAAUD,EAAM,KAAK,GAGzCA,EAAM,WAAa,OAAO,KAAKA,EAAM,SAAS,EAAE,OAAS,IAC5DC,EAAO,UAAe,KAAK,UAAUD,EAAM,SAAS,GAGjDA,EAAM,SAAWA,EAAM,QAAQ,OAAS,IAC3CC,EAAO,QAAaD,EAAM,QAAQ,KAAK,GAAG,GAG3C,OAAW,CAACM,EAAKH,CAAK,IAAK,OAAO,QAAQH,CAAK,EAC1CM,KAAOL,IAEP,OAAOE,GAAU,UAAY,OAAOA,GAAU,UAAY,OAAOA,GAAU,UAC9EF,EAAOK,CAAG,EAAI,OAAOH,CAAK,EAE1BF,EAAOK,CAAG,EAAI,KAAK,UAAUH,CAAK,GAIpC,OAAOF,CACR,EC1GA,IAAMW,EAAY,IAEZC,EAAa,CAACC,EAAWC,KAC1BD,EAAE,SAASF,CAAS,IAAGE,EAAIA,EAAE,MAAM,EAAG,EAAE,GACvCC,EAAE,WAAWH,CAAS,IAAGG,EAAIH,EAAYG,GACvCD,EAAIC,GAWCC,EAAgB,CAACC,EAAcC,EAAcC,IAAsC,CAC/F,IAAMC,EAAUH,EAAQ,WAAaL,EAAYM,EAAOL,EAAWI,EAAQ,SAAUC,CAAI,EACnFG,EAAM,IAAI,WAAW,IAAID,EAASH,CAAO,EAE/C,GAAIE,EACH,OAAW,CAACG,EAAGC,CAAC,IAAK,OAAO,QAAQC,EAAcL,CAAM,CAAC,EACxD,GAAII,GAAK,OAAOA,GAAM,UAAY,CAAC,MAAM,QAAQA,CAAC,EACjD,OAAW,CAACE,EAAIC,CAAE,IAAK,OAAO,QAAQH,CAAC,EACtCF,EAAI,aAAa,IAAI,GAAGC,CAAC,IAAIG,CAAE,IAAK,OAAOC,CAAE,CAAC,OAG/CL,EAAI,aAAa,IAAIC,EAAGC,CAAC,EAK5B,OAAOF,CACR,EC7BA,IAAMM,EAAqC,CAAC,EAO/BC,EAAU,CAACC,EAAiC,CAAC,IAC1BC,GAA0D,CACxF,IAAMC,EAAY,CAAE,GAAGJ,EAAqB,GAAGE,CAAO,EACtD,MAAO,CACN,MAAM,MACLG,EACAC,EACAC,EAA4B,QACV,CAClB,IAAMC,EAA4B,CACjC,OAAQ,OACR,KAAM,KAAK,UAAU,CAAE,MAAAH,EAAO,UAAAC,CAAU,CAAC,CAC1C,EAEI,gBAAiBF,IACpBI,EAAa,YAAcJ,EAAU,aAGtC,IAAMK,EAAkC,CAAC,EAEzC,GAAI,aAAc,KAAM,CACvB,IAAMC,EAAQ,MAAO,KAAK,SAAsD,EAE5EA,IACHD,EAAQ,cAAmB,UAAUC,CAAK,GAE5C,CAEI,iBAAkBD,IACrBA,EAAQ,cAAc,EAAI,oBAG3BD,EAAa,QAAUC,EACvB,IAAME,EAAcJ,IAAU,QAAU,WAAa,kBAC/CK,EAAaC,EAAcV,EAAO,IAAKQ,CAAW,EAExD,OAAO,MAAMG,EAAgBF,EAAW,SAAS,EAAGJ,EAAcL,EAAO,QAAQ,KAAK,CACvF,CACD,CACD","names":["graphql_exports","__export","graphql","__toCommonJS","isFetchResponse","result","extractData","response","isFetchResponse","type","result","request","url","options","fetcher","response","extractData","reason","defaultGlobals","queryToParams","query","params","walkFields","value","chain","result","key","nestedField","item","scope","fields","items","SEPARATOR","mergePaths","a","b","getRequestUrl","baseUrl","path","params","newPath","url","k","v","queryToParams","k2","v2","defaultConfigValues","graphql","config","client","gqlConfig","query","variables","scope","fetchOptions","headers","token","requestPath","requestUrl","getRequestUrl","request"]}